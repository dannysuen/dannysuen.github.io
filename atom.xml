<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Danny Yu Sun's Blog]]></title>
  <link href="http://dannysuen.github.io/atom.xml" rel="self"/>
  <link href="http://dannysuen.github.io/"/>
  <updated>2018-06-12T12:41:30+07:00</updated>
  <id>http://dannysuen.github.io/</id>
  <author>
    <name><![CDATA[Danny Yu Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java泛型中一些难点解析]]></title>
    <link href="http://dannysuen.github.io/blog/2018/06/12/java-generics/"/>
    <updated>2018-06-12T11:44:52+07:00</updated>
    <id>http://dannysuen.github.io/blog/2018/06/12/java-generics</id>
    <content type="html"><![CDATA[<p>Joshua Bloch：</p>

<blockquote><p>For maximum flexibility, use wildcard types on input parameters that represent producers or consumers. If an input parameter is both a producer and a consumer, then wildcard types will do you no good: you
need an exact type match, which is what you get without any wildcards. Here is a mnemonic to help you remember which wildcard type to use:
PECS stands for producer-extends, consumer-super.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 Optional]]></title>
    <link href="http://dannysuen.github.io/blog/2018/06/11/java-8-optional/"/>
    <updated>2018-06-11T21:15:02+07:00</updated>
    <id>http://dannysuen.github.io/blog/2018/06/11/java-8-optional</id>
    <content type="html"><![CDATA[<p>首先仔细浏览<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">Oracle</a>和<a href="https://developer.android.com/reference/java/util/Optional">Android</a>官方API文档。</p>

<p>Urma关于空指针的一段话：</p>

<blockquote><p>I will argue in this article that using null to represent the absence of a value is a wrong approach. What we need is a better way to model the absence and presence of a value.</p></blockquote>

<p>关于引入<code>java.util.Optional</code>类的初衷：</p>

<blockquote><p>It is important to note that the intention of the Optional class is not to replace every single null reference. Instead, its purpose is to help design more-comprehensible APIs so that by just reading the signature of a method, you can tell whether you can expect an optional value. This forces you to actively unwrap an Optional to deal with the absence of a value.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Java 8]]></title>
    <link href="http://dannysuen.github.io/blog/2018/06/11/introduction-to-java-8/"/>
    <updated>2018-06-11T11:59:30+07:00</updated>
    <id>http://dannysuen.github.io/blog/2018/06/11/introduction-to-java-8</id>
    <content type="html"><![CDATA[<p>关于<a href="http://math.hws.edu/javanotes/glossary.html">Java的术语总结</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在境外申请新加坡旅游签证攻略]]></title>
    <link href="http://dannysuen.github.io/blog/2018/06/07/applying-for-a-singapore-tourist-visa/"/>
    <updated>2018-06-07T18:33:21+07:00</updated>
    <id>http://dannysuen.github.io/blog/2018/06/07/applying-for-a-singapore-tourist-visa</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Stream API]]></title>
    <link href="http://dannysuen.github.io/blog/2018/06/06/java-stream-api/"/>
    <updated>2018-06-06T18:02:25+07:00</updated>
    <id>http://dannysuen.github.io/blog/2018/06/06/java-stream-api</id>
    <content type="html"><![CDATA[<p>Java 8引入了Stream的概念，掌握这个概念的最佳方式是阅读Java官方文档。
可以浏览一下Oracle Java文档或是<a href="https://developer.android.com/reference/java/util/stream/package-summary">Android官方文档</a>。</p>

<p>有些关键的概念需要掌握：stream、source、stream pipeline、stream operations、intermediate operations、terminal operation。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns a sequential {@code Stream} with this collection as its source.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;This method should be overridden when the {@link #spliterator()}</span>
</span><span class='line'><span class="cm"> * method cannot return a spliterator that is {@code IMMUTABLE},</span>
</span><span class='line'><span class="cm"> * {@code CONCURRENT}, or &lt;em&gt;late-binding&lt;/em&gt;. (See {@link #spliterator()}</span>
</span><span class='line'><span class="cm"> * for details.)</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @implSpec</span>
</span><span class='line'><span class="cm"> * The default implementation creates a sequential {@code Stream} from the</span>
</span><span class='line'><span class="cm"> * collection&#39;s {@code Spliterator}.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return a sequential {@code Stream} over the elements in this collection</span>
</span><span class='line'><span class="cm"> * @since 1.8</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">default</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">stream</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">StreamSupport</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">spliterator</span><span class="o">(),</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Stream实例只能被使用一次，否则会抛出Runtime Exception：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">IllegalStateException</span><span class="o">:</span> <span class="n">stream</span> <span class="n">has</span> <span class="n">already</span> <span class="n">been</span> <span class="n">operated</span> <span class="n">upon</span> <span class="n">or</span> <span class="n">closed</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambda Expressions]]></title>
    <link href="http://dannysuen.github.io/blog/2018/06/06/lambda-expressions/"/>
    <updated>2018-06-06T18:01:55+07:00</updated>
    <id>http://dannysuen.github.io/blog/2018/06/06/lambda-expressions</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 Functional Interfaces笔记]]></title>
    <link href="http://dannysuen.github.io/blog/2018/06/06/java-8-functional-interfaces-notes/"/>
    <updated>2018-06-06T17:15:33+07:00</updated>
    <id>http://dannysuen.github.io/blog/2018/06/06/java-8-functional-interfaces-notes</id>
    <content type="html"><![CDATA[<p>最近在准备OCJP 8考试，需要熟悉一下Java 8引入的函数式编程的概念。具体包括了Functional Interfaces、Lambda表达式、Stream API等新知识。</p>

<p>最值得阅读的文档一般都是官方文档。<a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html">Oracle</a>和<a href="https://developer.android.com/reference/java/util/function/package-summary">Android</a>都有文档的链接。</p>

<h2>4个内建(Built-in)的Functional interfaces</h2>

<p>Functional Interfaces，或称为函数式接口，主要是指列于<code>java.util.function</code>包下的所有新的接口。它们被设计出来以满足通用的需求。乍看下共有43个接口，会觉得很吓人。其实它们都是从4个最典型的接口派生而来，为了某个specialization的、更具体化的场景而设计的，说白了就是为了让程序员能够根据需求选择出最具体化的接口。</p>

<h3>1. Function接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">R</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Applies this function to the given argument.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param t the function argument</span>
</span><span class='line'><span class="cm">     * @return the function result</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">R</span> <span class="nf">apply</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Supplier接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Supplier</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Gets a result.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return a result</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">T</span> <span class="nf">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Predicate接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Predicate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Evaluates this predicate on the given argument.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param t the input argument</span>
</span><span class='line'><span class="cm">     * @return {@code true} if the input argument matches the predicate,</span>
</span><span class='line'><span class="cm">     * otherwise {@code false}</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Consumer接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Consumer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Performs this operation on the given argument.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param t the input argument</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lambda表达式和函数式接口并不是一一对应的关系，一个Lambda表达式可以与多个Functional Interfaces兼容（compatible）。</p>

<h2>Primitive Functional Interfaces</h2>

<p>Primitive Functional Interfaces只包含<code>double</code>、<code>int</code>和<code>long</code>类型，而不包含<code>char</code>、<code>float</code>和<code>short</code>类型，所以<code>java.util.function</code>包下就不存在类似<code>CharSupplier</code>的接口。</p>

<h2>补充</h2>

<p>arity的解释是"元数"，就是参数数目的意思。</p>
]]></content>
  </entry>
  
</feed>
